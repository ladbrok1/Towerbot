import random
import logging
from typing import Dict, Optional, List, Tuple
from player import Player
from database import Database
from combat import CombatSystem

logger = logging.getLogger(__name__)

class PvPManager:
    def __init__(self, db: Database, combat_system: CombatSystem):
        self.db = db
        self.combat_system = combat_system
        self.duels: Dict[int, Dict] = {}  # {chat_id: duel_data}
        self.arena_queues: Dict[str, List[int]] = {
            '1v1': [],
            '3v3': [],
            '5v5': []
        }
        self.pvp_zones = {
            'blood_arena': {'min_level': 30, 'max_players': 20},
            'wild_lands': {'min_level': 15, 'max_players': 50}
        }
        self.honor_rewards = {
            'win': 50,
            'loss': 10,
            'kill': 15
        }

    async def challenge_player(self, challenger: Player, target: Player) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É"""
        if challenger.user_id == target.user_id:
            return {'success': False, 'message': '–ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!'}

        if challenger.level < 10 or target.level < 10:
            return {'success': False, 'message': '–î–ª—è PvP –Ω—É–∂–µ–Ω –∫–∞–∫ –º–∏–Ω–∏–º—É–º 10 —É—Ä–æ–≤–µ–Ω—å'}

        if challenger.current_hp < challenger.max_hp * 0.5:
            return {'success': False, 'message': '–í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã—à–µ 50%'}

        duel_id = hash(f"{challenger.user_id}_{target.user_id}_{random.randint(1000, 9999)}")
        self.duels[duel_id] = {
            'challenger': challenger,
            'target': target,
            'status': 'pending',
            'timestamp': datetime.now(),
            'bet': 0
        }

        return {
            'success': True,
            'duel_id': duel_id,
            'message': f"{target.name}, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –≤—ã–∑–æ–≤ –æ—Ç {challenger.name}! –ü—Ä–∏–Ω—è—Ç—å? /accept_duel_{duel_id}"
        }

    async def accept_duel(self, duel_id: int, accepted: bool) -> Dict:
        """–ü—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å"""
        duel = self.duels.get(duel_id)
        if not duel:
            return {'success': False, 'message': '–í—ã–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫'}

        if not accepted:
            self.duels.pop(duel_id)
            return {'success': True, 'message': '–í—ã–∑–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω'}

        if duel['status'] != 'pending':
            return {'success': False, 'message': '–≠—Ç–æ—Ç –≤—ã–∑–æ–≤ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω'}

        challenger = duel['challenger']
        target = duel['target']

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–æ–≤
        for player in [challenger, target]:
            if player.current_hp < player.max_hp * 0.3:
                self.duels.pop(duel_id)
                return {'success': False, 'message': f'{player.name} –Ω–µ –≥–æ—Ç–æ–≤ –∫ –±–∏—Ç–≤–µ (HP < 30%)'}

        duel['status'] = 'active'
        battle_result = await self._start_duel(challenger, target)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ PvP
        await self._update_pvp_stats(challenger, target, battle_result['winner'])
        self.duels.pop(duel_id)
        
        return battle_result

    async def _start_duel(self, player1: Player, player2: Player) -> Dict:
        """–ü—Ä–æ–≤–µ—Å—Ç–∏ –¥—É—ç–ª—å –º–µ–∂–¥—É –¥–≤—É–º—è –∏–≥—Ä–æ–∫–∞–º–∏"""
        logger.info(f"Starting duel between {player1.name} and {player2.name}")

        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è PvP
        pvp_modifiers = {
            'damage_reduction': 0.3,  # –£–º–µ–Ω—å—à–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ –≤ PvP
            'cc_duration': 0.5       # –£–º–µ–Ω—å—à–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è
        }

        battle_log = []
        round_count = 0
        max_rounds = 20

        while player1.current_hp > 0 and player2.current_hp > 0 and round_count < max_rounds:
            round_count += 1
            round_log = f"üî¥ –†–∞—É–Ω–¥ {round_count}:"

            # –•–æ–¥ –∏–≥—Ä–æ–∫–∞ 1
            attack_result = self.combat_system.pvp_attack(player1, player2, pvp_modifiers)
            round_log += f"\n{player1.name} –Ω–∞–Ω–æ—Å–∏—Ç {attack_result['damage']} —É—Ä–æ–Ω–∞!"
            if attack_result.get('critical'):
                round_log += " –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä!"
            
            # –•–æ–¥ –∏–≥—Ä–æ–∫–∞ 2
            if player2.current_hp > 0:
                attack_result = self.combat_system.pvp_attack(player2, player1, pvp_modifiers)
                round_log += f"\n{player2.name} –Ω–∞–Ω–æ—Å–∏—Ç {attack_result['damage']} —É—Ä–æ–Ω–∞!"
                if attack_result.get('critical'):
                    round_log += " –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä!"

            battle_log.append(round_log)

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if player1.current_hp <= 0:
            winner = player2
            loser = player1
        elif player2.current_hp <= 0:
            winner = player1
            loser = player2
        else:
            winner = None  # –ù–∏—á—å—è –ø–æ —Ç–∞–π–º–∞—É—Ç—É

        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ—Å–ª–µ –±–æ—è
        player1.current_hp = min(player1.current_hp, player1.max_hp * 0.3)
        player2.current_hp = min(player2.current_hp, player2.max_hp * 0.3)

        return {
            'winner': winner,
            'loser': loser,
            'is_draw': winner is None,
            'rounds': round_count,
            'battle_log': battle_log,
            'honor_gained': self.honor_rewards['win'] if winner else 0
        }

    async def join_arena_queue(self, player: Player, arena_type: str) -> Dict:
        """–í–æ–π—Ç–∏ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –∞—Ä–µ–Ω—É"""
        if arena_type not in self.arena_queues:
            return {'success': False, 'message': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∞—Ä–µ–Ω—ã'}

        if player.user_id in self.arena_queues[arena_type]:
            return {'success': False, 'message': '–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏'}

        self.arena_queues[arena_type].append(player.user_id)
        return {'success': True, 'message': f'–í—ã –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ {arena_type} –∞—Ä–µ–Ω—É'}

    async def leave_arena_queue(self, player: Player) -> Dict:
        """–ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å –Ω–∞ –∞—Ä–µ–Ω—É"""
        for queue in self.arena_queues.values():
            if player.user_id in queue:
                queue.remove(player.user_id)
                return {'success': True, 'message': '–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –æ—á–µ—Ä–µ–¥—å'}
        return {'success': False, 'message': '–í—ã –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏'}

    async def check_arena_matches(self) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å –º–∞—Ç—á–∏ –¥–ª—è –∞—Ä–µ–Ω—ã"""
        formed_matches = []
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ 1v1 –æ—á–µ—Ä–µ–¥–∏
        while len(self.arena_queues['1v1']) >= 2:
            player1_id = self.arena_queues['1v1'].pop(0)
            player2_id = self.arena_queues['1v1'].pop(0)
            
            formed_matches.append({
                'type': '1v1',
                'team1': [player1_id],
                'team2': [player2_id]
            })

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ 3v3 –æ—á–µ—Ä–µ–¥–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        if len(self.arena_queues['3v3']) >= 6:
            team1 = [self.arena_queues['3v3'].pop(0) for _ in range(3)]
            team2 = [self.arena_queues['3v3'].pop(0) for _ in range(3)]
            
            formed_matches.append({
                'type': '3v3',
                'team1': team1,
                'team2': team2
            })

        return formed_matches

    async def _update_pvp_stats(self, player1: Player, player2: Player, winner: Optional[Player]) -> None:
        """–û–±–Ω–æ–≤–∏—Ç—å PvP —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤"""
        with self.db.get_connection() as conn:
            cursor = conn.cursor()
            
            if winner:
                loser = player2 if winner.user_id == player1.user_id else player1
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                cursor.execute(
                    "UPDATE pvp_stats SET wins = wins + 1, honor = honor + ? WHERE user_id = ?",
                    (self.honor_rewards['win'], winner.user_id)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ
                cursor.execute(
                    "UPDATE pvp_stats SET losses = losses + 1, honor = honor + ? WHERE user_id = ?",
                    (self.honor_rewards['loss'], loser.user_id))
            else:
                # –ù–∏—á—å—è
                for player in [player1, player2]:
                    cursor.execute(
                        "UPDATE pvp_stats SET draws = draws + 1 WHERE user_id = ?",
                        (player.user_id,))

            conn.commit()

    async def get_pvp_leaderboard(self, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ PvP"""
        with self.db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT user_id, wins, losses, draws, honor 
                FROM pvp_stats 
                ORDER BY honor DESC 
                LIMIT ?
            """, (limit,))
            
            return [dict(row) for row in cursor.fetchall()]

    async def handle_pvp_zone_combat(self, attacker: Player, defender: Player) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ—è –≤ PvP –∑–æ–Ω–µ"""
        if not self._can_attack(attacker, defender):
            return {'success': False, 'message': '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞—Ç–∞–∫–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞'}

        combat_result = await self._start_duel(attacker, defender)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —É–±–∏–π—Å—Ç–≤–æ –≤ PvP –∑–æ–Ω–µ
        if combat_result['winner']:
            combat_result['honor_gained'] += self.honor_rewards['kill']
            await self._update_pvp_stats(attacker, defender, combat_result['winner'])
        
        return combat_result

    def _can_attack(self, attacker: Player, defender: Player) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –∞—Ç–∞–∫–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ"""
        # –ò–≥—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å —Å–µ–±—è
        if attacker.user_id == defender.user_id:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if abs(attacker.level - defender.level) > 10:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–∞–∫—Ü–∏–π/–≥–∏–ª—å–¥–∏–π (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å)
        return True

    async def reset_pvp_season(self):
        """–°–±—Ä–æ—Å–∏—Ç—å PvP —Å–µ–∑–æ–Ω –∏ –≤—ã–¥–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã"""
        with self.db.get_connection() as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤
            top_players = await self.get_pvp_leaderboard(100)
            
            # –í—ã–¥–∞—Ç—å —Å–µ–∑–æ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
            for i, player in enumerate(top_players, start=1):
                rewards = self._calculate_season_rewards(i)
                cursor.execute(
                    "INSERT INTO seasonal_rewards (user_id, season, position, rewards) VALUES (?, ?, ?, ?)",
                    (player['user_id'], datetime.now().strftime("%Y-%m"), i, str(rewards))
            
            # –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            cursor.execute("UPDATE pvp_stats SET wins = 0, losses = 0, draws = 0")
            conn.commit()

    def _calculate_season_rewards(self, position: int) -> Dict:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–µ–∑–æ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏"""
        if position == 1:
            return {'title': 'Gladiator', 'gold': 5000, 'items': ['legendary_weapon']}
        elif position <= 3:
            return {'title': 'Champion', 'gold': 3000, 'items': ['epic_armor']}
        elif position <= 10:
            return {'title': 'Elite', 'gold': 1500, 'items': ['rare_mount']}
        elif position <= 50:
            return {'title': 'Veteran', 'gold': 800}
        else:
            return {'title': 'Participant', 'gold': 300}
