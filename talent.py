############################
### talent.py - –°–∏—Å—Ç–µ–º–∞ —Ç–∞–ª–∞–Ω—Ç–æ–≤ ###
############################
"""
–ú–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º—ã —Ç–∞–ª–∞–Ω—Ç–æ–≤:
- –î–µ—Ä–µ–≤—å—è —Ç–∞–ª–∞–Ω—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ä—É–∂–∏—è
- –ò–∑—É—á–µ–Ω–∏–µ —Ç–∞–ª–∞–Ω—Ç–æ–≤
- –ü–∞—Å—Å–∏–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã
- –°–±—Ä–æ—Å —Ç–∞–ª–∞–Ω—Ç–æ–≤
"""
import database as db
import world
from telebot import types

def show_talents(bot, message):
    player_id = message.from_user.id
    player_data = db.load_player(player_id)
    
    if not player_data or not player_data["current_weapon"]:
        bot.send_message(message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –æ—Ä—É–∂–∏–µ!")
        return
    
    weapon = player_data["current_weapon"]
    talent_tree = world.talent_trees[weapon]
    
    talent_text = f"üå≥ *–î—Ä–µ–≤–æ —Ç–∞–ª–∞–Ω—Ç–æ–≤: {world.weapons_data[weapon]['name']}*\n"
    talent_text += f"–û—á–∫–∏ —Ç–∞–ª–∞–Ω—Ç–æ–≤: {player_data.get('talent_points', 0)}\n\n"
    
    markup = types.InlineKeyboardMarkup()
    
    for talent in talent_tree:
        learned = talent["id"] in player_data.get("learned_talents", [])
        talent_text += f"{'‚úÖ' if learned else 'üî≤'} {talent['name']} - {talent['cost']} –æ—á."
        talent_text += f" ({talent['effect']})\n"
        
        if not learned and player_data.get('talent_points', 0) >= talent['cost']:
            markup.add(types.InlineKeyboardButton(
                f"–ò–∑—É—á–∏—Ç—å {talent['name']}",
                callback_data=f"learn_{talent['id']}"
            ))
    
    markup.add(types.InlineKeyboardButton("üîÅ –°–±—Ä–æ—Å–∏—Ç—å —Ç–∞–ª–∞–Ω—Ç—ã (1000g)", callback_data="reset_talents"))
    
    bot.send_message(
        message.chat.id,
        talent_text,
        reply_markup=markup,
        parse_mode="Markdown"
    )

def learn_talent(bot, call):
    player_id = call.from_user.id
    player_data = db.load_player(player_id)
    talent_id = call.data.split("_")[1]
    
    if not player_data:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö!")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–∞–ª–∞–Ω—Ç –≤ –¥–µ—Ä–µ–≤–µ
    weapon = player_data["current_weapon"]
    talent = next((t for t in world.talent_trees[weapon] if t["id"] == talent_id), None)
    
    if not talent:
        bot.answer_callback_query(call.id, "‚ùå –¢–∞–ª–∞–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∏–∑—É—á–∏—Ç—å
    if player_data.get('talent_points', 0) >= talent['cost']:
        player_data['talent_points'] -= talent['cost']
        
        if "learned_talents" not in player_data:
            player_data["learned_talents"] = []
        player_data["learned_talents"].append(talent_id)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Ç–∞–ª–∞–Ω—Ç–∞
        apply_talent_effect(player_data, talent)
        
        db.save_player(player_id, player_data)
        bot.answer_callback_query(call.id, f"‚ú® –¢—ã –∏–∑—É—á–∏–ª —Ç–∞–ª–∞–Ω—Ç {talent['name']}!")
        show_talents(bot, call.message)
    else:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ —Ç–∞–ª–∞–Ω—Ç–æ–≤!")

def apply_talent_effect(player_data, talent):
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Ç–∞–ª–∞–Ω—Ç–∞ –∫ –ø–µ—Ä—Å–æ–Ω–∞–∂—É
    effect = talent["effect"]
    
    if effect.startswith("damage+"):
        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –∫ —É—Ä–æ–Ω—É
        bonus = float(effect.replace("damage+", "").replace("%", "")) / 100
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–∞—Ö
        player_data["active_effects"].append({
            "type": "damage_bonus",
            "value": bonus
        })
    # ... –¥—Ä—É–≥–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã

def reset_talents(bot, call):
    player_id = call.from_user.id
    player_data = db.load_player(player_id)
    
    if not player_data:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö!")
        return
    
    if player_data["gold"] >= 1000:
        player_data["gold"] -= 1000
        talent_points = len(player_data.get("learned_talents", []))
        player_data["talent_points"] += talent_points
        player_data["learned_talents"] = []
        
        # –£–¥–∞–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —Ç–∞–ª–∞–Ω—Ç–æ–≤
        player_data["active_effects"] = [e for e in player_data["active_effects"] if e.get("source") != "talent"]
        
        db.save_player(player_id, player_data)
        bot.answer_callback_query(call.id, "üîÅ –¢–∞–ª–∞–Ω—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã!")
        show_talents(bot, call.message)
    else:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!")