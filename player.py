############################
### player.py - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–º ###
############################
"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–º:
- –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
- –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏ –ø—Ä–µ–¥–º–µ—Ç—ã
- –°–º–µ—Ä—Ç—å –∏ –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ
- –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –≥–∏–ª—å–¥–∏—è–º–∏
"""
import random
import database as db
import world
from telebot import types

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
STAT_NAMES = {
    'strength': 'üí™ –°–∏–ª–∞',
    'agility': 'üèÉ –õ–æ–≤–∫–æ—Å—Ç—å',
    'vitality': '‚ù§Ô∏è –ñ–∏–≤—É—á–µ—Å—Ç—å',
    'luck': 'üçÄ –£–¥–∞—á–∞',
    'accuracy': 'üéØ –¢–æ—á–Ω–æ—Å—Ç—å',
    'defense': 'üõ°Ô∏è –ó–∞—â–∏—Ç–∞'
}

WEAPON_CHOICES = {
    "üó°Ô∏è –ú–µ—á": "sword",
    "üî™ –ö–∏–Ω–∂–∞–ª": "dagger",
    "üèè –ë—É–ª–∞–≤–∞": "mace",
    "üèπ –õ—É–∫": "bow",
    "ü™ì –¢–æ–ø–æ—Ä": "axe",
    "üî± –ö–æ–ø—å–µ": "spear",
    "üî® –ú–æ–ª–æ—Ç": "hammer",
    "üèπ –ê—Ä–±–∞–ª–µ—Ç": "crossbow"
}

def handle_start(bot, message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    player_id = message.from_user.id
    player = db.load_player(player_id)

    if not player:
        start_new_player(bot, message)
    else:
        show_main_menu(bot, message)

def start_new_player(bot, message):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    bot.send_message(message.chat.id, world.world_lore, parse_mode="Markdown")
    bot.send_message(message.chat.id,
                    "üå† *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–∞—à–Ω—é –¢—ã—Å—è—á–∏ –ì—Ä–µ–∑!*\n"
                    "–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, —Å–∫–∞–∂–∏ –º–Ω–µ, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç, –∏—Å–∫–∞—Ç–µ–ª—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π?",
                    parse_mode="Markdown")
    bot.register_next_step_handler(message, lambda m: set_nickname(bot, m))

def set_nickname(bot, message):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–º–µ–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    player_id = message.from_user.id
    nickname = message.text.strip()
    
    if not nickname or len(nickname) > 20:
        bot.send_message(message.chat.id, "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤!")
        bot.register_next_step_handler(message, lambda m: set_nickname(bot, m))
        return

    player = world.player_template.copy()
    player["nickname"] = nickname
    db.save_player(player_id, player)

    bot.send_message(message.chat.id,
                    "üé≤ *–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏ 25 –æ—á–∫–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:* (—Ñ–æ—Ä–º–∞—Ç: 5 5 5 5 5 5)\n"
                    "üí™ –°–∏–ª–∞ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —É—Ä–æ–Ω –∏ —à–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞\n"
                    "üèÉ –õ–æ–≤–∫–æ—Å—Ç—å - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –∞—Ç–∞–∫–∏\n"
                    "‚ù§Ô∏è –ñ–∏–≤—É—á–µ—Å—Ç—å - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ\n"
                    "üçÄ –£–¥–∞—á–∞ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å –Ω–∞–π—Ç–∏ —Ä–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã\n"
                    "üéØ –¢–æ—á–Ω–æ—Å—Ç—å - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å –ø–æ–ø–∞–¥–∞–Ω–∏—è\n"
                    "üõ°Ô∏è –ó–∞—â–∏—Ç–∞ - —É–º–µ–Ω—å—à–∞–µ—Ç –ø–æ–ª—É—á–∞–µ–º—ã–π —É—Ä–æ–Ω",
                    parse_mode="Markdown")
    bot.register_next_step_handler(message, lambda m: set_stats(bot, m))

def set_stats(bot, message):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    player_id = message.from_user.id
    player = db.load_player(player_id)

    try:
        stats = list(map(int, message.text.split()))
        if sum(stats) == 25 and len(stats) == 6:
            player["stats"] = {
                "strength": stats[0],
                "agility": stats[1],
                "vitality": stats[2],
                "luck": stats[3],
                "accuracy": stats[4],
                "defense": stats[5]
            }
            player["max_hp"] = 80 + stats[2] * 4
            player["hp"] = player["max_hp"]
            db.save_player(player_id, player)
            
            show_weapon_selection(bot, message)
        else:
            raise ValueError
    except:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏ 6 —á–∏—Å–µ–ª (—Å—É–º–º–∞=25).")
        bot.register_next_step_handler(message, lambda m: set_stats(bot, m))

def show_weapon_selection(bot, message):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –æ—Ä—É–∂–∏—è"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    weapons = list(WEAPON_CHOICES.keys())
    markup.add(*weapons[:4])
    markup.add(*weapons[4:])

    bot.send_message(message.chat.id,
                   "‚öîÔ∏è *–í—ã–±–µ—Ä–∏ —Å–≤–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –æ—Ä—É–∂–∏–µ:*\n"
                   "üó°Ô∏è –ú–µ—á - —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ\n"
                   "üî™ –ö–∏–Ω–∂–∞–ª - –±—ã—Å—Ç—Ä—ã–µ –∞—Ç–∞–∫–∏\n"
                   "üèè –ë—É–ª–∞–≤–∞ - –º–æ—â–Ω—ã–µ —É–¥–∞—Ä—ã\n"
                   "üèπ –õ—É–∫ - –¥–∞–ª—å–Ω–∏–π –±–æ–π\n"
                   "ü™ì –¢–æ–ø–æ—Ä - –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–Ω\n"
                   "üî± –ö–æ–ø—å–µ - –¥–∞–ª—å–Ω–∏–µ –∞—Ç–∞–∫–∏\n"
                   "üî® –ú–æ–ª–æ—Ç - —Å–æ–∫—Ä—É—à–∏—Ç–µ–ª—å–Ω—ã–µ —É–¥–∞—Ä—ã\n"
                   "üèπ –ê—Ä–±–∞–ª–µ—Ç - –º–æ—â–Ω—ã–µ –≤—ã—Å—Ç—Ä–µ–ª—ã",
                   reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, lambda m: set_weapon(bot, m))

def set_weapon(bot, message, after_death=False):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ä—É–∂–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    player_id = message.from_user.id
    player = db.load_player(player_id)

    if player is None:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return

    if message.text in WEAPON_CHOICES:
        weapon = WEAPON_CHOICES[message.text]
        
        if weapon not in world.weapons_data:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –æ—Ä—É–∂–∏–µ {weapon} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return

        player["current_weapon"] = weapon
        player["weapons"][weapon] = {"level": 1, "skills": [world.weapons_data[weapon]["base_skill"]]}
        db.save_player(player_id, player)

        check_new_skills(bot, player_id, weapon)
        
        response = (f"‚úÖ –¢—ã {'–≤–æ–∑—Ä–æ–¥–∏–ª—Å—è —Å' if after_death else '–≤—ã–±—Ä–∞–ª'} " 
                   f"{world.weapons_data[weapon]['name']}!\n"
                   f"–¢–≤–æ–π –ø–µ—Ä–≤—ã–π –Ω–∞–≤—ã–∫: *{world.weapons_data[weapon]['base_skill']}*")
        
        bot.send_message(message.chat.id, response, parse_mode="Markdown")
        show_main_menu(bot, message)
    else:
        bot.send_message(message.chat.id, "‚ùå –í—ã–±–µ—Ä–∏ –æ—Ä—É–∂–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞!")
        bot.register_next_step_handler(message, lambda m: set_weapon(bot, m, after_death))

def check_new_skills(bot, player_id, weapon_type):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤"""
    player = db.load_player(player_id)
    if player is None:
        return

    weapon_data = world.weapons_data.get(weapon_type, {})
    if not weapon_data:
        return

    stats = player["stats"]
    weapon_level = player["weapons"].get(weapon_type, {}).get("level", 1)
    current_skills = player["weapons"].get(weapon_type, {}).get("skills", [])

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
    dominant_stat = max(stats, key=stats.get)
    stat_value = stats[dominant_stat]

    # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –Ω–∞–≤—ã–∫–∏
    available_skills = []
    for skill_name, skill_data in weapon_data.get("skills", {}).items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –Ω–∞–≤—ã–∫–∞
        req_met = True
        for stat, value in skill_data.items():
            if stat.startswith("min_"):
                stat_name = stat[4:]
                if stats.get(stat_name, 0) < value:
                    req_met = False
                    break

        # –ï—Å–ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏ –Ω–∞–≤—ã–∫ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω
        if req_met and skill_name not in current_skills:
            # –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–µ
            if weapon_data.get("stat") == dominant_stat:
                available_skills.insert(0, skill_name)
            else:
                available_skills.append(skill_name)

    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π
    if available_skills:
        new_skill = random.choice(available_skills)
        player["weapons"][weapon_type]["skills"].append(new_skill)
        db.save_player(player_id, player)
        
        bot.send_message(player_id,
                       f"‚ú® –¢—ã –æ—Å–≤–æ–∏–ª –Ω–æ–≤—ã–π –Ω–∞–≤—ã–∫: *{new_skill}*!\n"
                       f"–ò—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –≤ –±–æ—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤—ã–∫–æ–≤.",
                       parse_mode="Markdown")

def show_main_menu(bot, message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏–≥—Ä–æ–∫–∞"""
    player_id = message.from_user.id
    player = db.load_player(player_id)
    if player is None:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö! –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    server_progress = db.get_server_progress()
    floor_desc = world.FLOOR_DESCRIPTIONS.get(player["floor"], f"–≠—Ç–∞–∂ {player['floor']}")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        "‚öîÔ∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å –º–æ–±–∞",
        "üèÉ‚Äç‚ôÇÔ∏è –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å",
        "üëë –ê—Ç–∞–∫–æ–≤–∞—Ç—å –±–æ—Å—Å–∞",
        "üë• –†–µ–π–¥—ã",
        "‚öîÔ∏è PvP",
        "üõí –ú–∞–≥–∞–∑–∏–Ω",
        "üìä –ü–µ—Ä—Å–æ–Ω–∞–∂",
        "üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å",
        "üîß –¢–∞–ª–∞–Ω—Ç—ã",
        "üè¶ –≠–∫–æ–Ω–æ–º–∏–∫–∞",
        "üè∞ –ì–∏–ª—å–¥–∏—è"
    ]
    markup.add(*buttons[:3])
    markup.add(*buttons[3:6])
    markup.add(*buttons[6:9])
    markup.add(*buttons[9:])

    # –û–ø—ã—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    required_exp = player['level'] * 100

    # –û—Ä—É–∂–∏–µ
    weapon = player['current_weapon']
    if weapon and weapon in world.weapons_data:
        weapon_name = world.weapons_data[weapon]['name']
        weapon_level = player['weapons'][weapon]['level']
        weapon_text = f"üó°Ô∏è –û—Ä—É–∂–∏–µ: {weapon_name} (–£—Ä. {weapon_level})"
    else:
        weapon_text = "üó°Ô∏è –û—Ä—É–∂–∏–µ: –ù–µ –≤—ã–±—Ä–∞–Ω–æ"

    status = (
        f"üë§ *{player['nickname']}* | –£—Ä. {player['level']} ({player['exp']}/{required_exp})\n"
        f"üèÜ –≠—Ç–∞–∂ {player['floor']}: {floor_desc}\n"
        f"‚ù§Ô∏è HP: {player['hp']}/{player['max_hp']}\n"
        f"ü™ô –ó–æ–ª–æ—Ç–æ: {player['gold']}\n"
        f"{weapon_text}"
    )

    bot.send_message(message.chat.id, status, reply_markup=markup, parse_mode="Markdown")

def show_character(bot, message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ"""
    player_id = message.from_user.id
    player = db.load_player(player_id)
    if not player:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö!")
        return

    weapon = player["current_weapon"]
    weapon_data = world.weapons_data.get(weapon, {})
    weapon_name = weapon_data.get("name", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    weapon_level = player["weapons"].get(weapon, {}).get("level", 0)
    weapon_skills = ", ".join(player["weapons"].get(weapon, {}).get("skills", []))

    stats_text = "\n".join(
        f"{STAT_NAMES.get(stat, '‚ùì')}: {value}"
        for stat, value in player["stats"].items()
    )

    required_exp = player['level'] * 100
    character_info = (
        f"üë§ *{player['nickname']}*\n"
        f"üèÜ –£—Ä–æ–≤–µ–Ω—å: {player['level']} ({player['exp']}/{required_exp} –æ–ø—ã—Ç–∞)\n"
        f"üè† –≠—Ç–∞–∂: {player['floor']}\n"
        f"üíÄ –°–º–µ—Ä—Ç–µ–π: {player.get('deaths', 0)}\n\n"
        f"‚öîÔ∏è *–û—Ä—É–∂–∏–µ:* {weapon_name} (–£—Ä. {weapon_level})\n"
        f"üîÆ –ù–∞–≤—ã–∫–∏: {weapon_skills or '–ù–µ—Ç –Ω–∞–≤—ã–∫–æ–≤'}\n\n"
        f"üìä *–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:*\n{stats_text}"
    )

    markup = types.InlineKeyboardMarkup()
    if player["exp"] >= required_exp:
        markup.add(types.InlineKeyboardButton("‚¨ÜÔ∏è –ü–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="level_up"))

    bot.send_message(message.chat.id, character_info, reply_markup=markup, parse_mode="Markdown")

def increase_stat(bot, call):
    """–ü–æ–≤—ã—à–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ —É—Ä–æ–≤–Ω–µ"""
    player_id = call.from_user.id
    player = db.load_player(player_id)
    if player is None:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö!")
        return

    stat_map = {
        "stat_str": "strength",
        "stat_agi": "agility",
        "stat_acc": "accuracy",
        "stat_luck": "luck",
        "stat_def": "defense",
        "stat_vit": "vitality"
    }

    stat = stat_map.get(call.data)
    if not stat:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏!")
        return

    player["stats"][stat] += 1

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    if stat == "vitality":
        player["max_hp"] = 80 + player["stats"]["vitality"] * 4
        player["hp"] = min(player["hp"], player["max_hp"])

    db.save_player(player_id, player)
    bot.answer_callback_query(call.id, f"{STAT_NAMES[stat]} —É–≤–µ–ª–∏—á–µ–Ω–∞!")
    show_character(bot, call.message)

def show_inventory(bot, message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏–≥—Ä–æ–∫–∞"""
    player_id = message.from_user.id
    player = db.load_player(player_id)
    if not player:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö!")
        return

    inventory = player.get("inventory", {})
    if not inventory:
        bot.send_message(message.chat.id, "üéí *–¢–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç!*", parse_mode="Markdown")
        return

    inventory_text = "üéí *–¢–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:*\n"
    for item, quantity in inventory.items():
        item_name = world.ITEMS.get(item, {}).get("name", item)
        inventory_text += f"- {item_name}: {quantity} —à—Ç.\n"

    markup = types.InlineKeyboardMarkup()
    if "health_potion" in inventory:
        markup.add(types.InlineKeyboardButton("üíâ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è", callback_data="use_health_potion"))
    if "elixir_strength" in inventory:
        markup.add(types.InlineKeyboardButton("üí™ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–ª–∏–∫—Å–∏—Ä —Å–∏–ª—ã", callback_data="use_elixir_str"))
    if "elixir_agility" in inventory:
        markup.add(types.InlineKeyboardButton("üèÉ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–ª–∏–∫—Å–∏—Ä –ª–æ–≤–∫–æ—Å—Ç–∏", callback_data="use_elixir_agi"))

    bot.send_message(message.chat.id, inventory_text, reply_markup=markup, parse_mode="Markdown")

def use_item(bot, call):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"""
    player_id = call.from_user.id
    player = db.load_player(player_id)
    if not player:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö!")
        return

    item_type = call.data.split("_")[1]
    inventory = player.get("inventory", {})

    item_effects = {
        "health_potion": {
            "effect": lambda p: p.update({"hp": min(p["max_hp"], p["hp"] + 50)}),
            "message": "üíâ +50 HP!",
            "success": "health_potion" in inventory
        },
        "elixir_str": {
            "effect": lambda p: p["stats"].update({"strength": p["stats"]["strength"] + 5}),
            "message": "üí™ +5 –∫ —Å–∏–ª–µ –Ω–∞ 1 —á–∞—Å!",
            "success": "elixir_strength" in inventory
        },
        "elixir_agi": {
            "effect": lambda p: p["stats"].update({"agility": p["stats"]["agility"] + 5}),
            "message": "üèÉ +5 –∫ –ª–æ–≤–∫–æ—Å—Ç–∏ –Ω–∞ 1 —á–∞—Å!",
            "success": "elixir_agility" in inventory
        }
    }

    effect = item_effects.get(item_type)
    if not effect or not effect["success"]:
        bot.answer_callback_query(call.id, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!")
        return

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–µ–¥–º–µ—Ç–∞
    effect["effect"](player)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    item_key = {
        "health_potion": "health_potion",
        "elixir_str": "elixir_strength",
        "elixir_agi": "elixir_agility"
    }[item_type]
    
    player["inventory"][item_key] -= 1
    if player["inventory"][item_key] <= 0:
        del player["inventory"][item_key]

    db.save_player(player_id, player)
    bot.answer_callback_query(call.id, effect["message"])
    show_inventory(bot, call.message)

def handle_death(bot, player_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ—Ä—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    player = db.load_player(player_id)
    if not player:
        return

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–º–µ—Ä—Ç–µ–π
    deaths = player.get("deaths", 0) + 1
    nickname = player["nickname"]

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å —Ç–µ–º –∂–µ –∏–º–µ–Ω–µ–º
    new_player = world.player_template.copy()
    new_player["nickname"] = nickname
    new_player["deaths"] = deaths
    new_player["floor"] = 1  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–∂–∞

    db.save_player(player_id, new_player)

    bot.send_message(
        player_id,
        f"üíÄ *–¢—ã –ø–æ–≥–∏–±...*\n\n"
        f"–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤–æ–∑—Ä–æ–∂–¥–∞–µ—Ç—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–º —ç—Ç–∞–∂–µ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏.\n"
        f"–í—Å–µ —Ç–≤–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Ç–µ—Ä—è–Ω—ã, –Ω–æ –∏–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n\n"
        f"–¢–µ–ø–µ—Ä—å —Ç—ã —Å–Ω–æ–≤–∞ *{nickname}*, –Ω–æ —É–∂–µ —Å –æ–ø—ã—Ç–æ–º {deaths} —Å–º–µ—Ä—Ç–µ–π.",
        parse_mode="Markdown"
    )

    # –í—ã–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    check_achievements(bot, player_id, "first_death")
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤–æ–µ –æ—Ä—É–∂–∏–µ
    choose_weapon_after_death(bot, player_id)

def choose_weapon_after_death(bot, player_id):
    """–í—ã–±–æ—Ä –æ—Ä—É–∂–∏—è –ø–æ—Å–ª–µ —Å–º–µ—Ä—Ç–∏"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    weapons = list(WEAPON_CHOICES.keys())
    markup.add(*weapons[:4])
    markup.add(*weapons[4:])

    bot.send_message(player_id,
                   "‚öîÔ∏è *–í—ã–±–µ—Ä–∏ –Ω–æ–≤–æ–µ –æ—Ä—É–∂–∏–µ –¥–ª—è –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è:*\n"
                   "üó°Ô∏è –ú–µ—á - —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ\n"
                   "üî™ –ö–∏–Ω–∂–∞–ª - –±—ã—Å—Ç—Ä—ã–µ –∞—Ç–∞–∫–∏\n"
                   "üèè –ë—É–ª–∞–≤–∞ - –º–æ—â–Ω—ã–µ —É–¥–∞—Ä—ã\n"
                   "üèπ –õ—É–∫ - –¥–∞–ª—å–Ω–∏–π –±–æ–π\n"
                   "ü™ì –¢–æ–ø–æ—Ä - –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–Ω\n"
                   "üî± –ö–æ–ø—å–µ - –¥–∞–ª—å–Ω–∏–µ –∞—Ç–∞–∫–∏\n"
                   "üî® –ú–æ–ª–æ—Ç - —Å–æ–∫—Ä—É—à–∏—Ç–µ–ª—å–Ω—ã–µ —É–¥–∞—Ä—ã\n"
                   "üèπ –ê—Ä–±–∞–ª–µ—Ç - –º–æ—â–Ω—ã–µ –≤—ã—Å—Ç—Ä–µ–ª—ã",
                   reply_markup=markup, parse_mode="Markdown")

    # –°–æ–∑–¥–∞–µ–º fake message –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    class FakeMessage:
        def __init__(self, chat_id, user_id):
            self.chat = types.Chat(id=chat_id, type='private')
            self.from_user = types.User(id=user_id, is_bot=False, first_name='')
            self.text = ''

    fake_msg = FakeMessage(player_id, player_id)
    bot.register_next_step_handler(fake_msg, lambda m: set_weapon(bot, m, after_death=True))

def check_achievements(bot, player_id, achievement_type):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–¥–∞—á–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    player = db.load_player(player_id)
    if not player:
        return

    achievements = player.get("achievements", {})
    
    if achievement_type == "first_death" and not achievements.get("first_death"):
        achievements["first_death"] = True
        player["achievements"] = achievements
        db.save_player(player_id, player)
        bot.send_message(player_id, "üèÜ –ü–æ–ª—É—á–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: *–ü–µ—Ä–≤–∞—è –∫—Ä–æ–≤—å*!", parse_mode="Markdown")
        
def add_item_to_inventory(bot, player_id, item_name, amount=1):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å"""
    player = db.load_player(player_id)
    if not player:
        return False

    if "inventory" not in player:
        player["inventory"] = {}

    if item_name in player["inventory"]:
        player["inventory"][item_name] += amount
    else:
        player["inventory"][item_name] = amount

    db.save_player(player_id, player)
    return True
    
def calculate_secondary_stats(player):
    """–†–∞—Å—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
    stats = player["stats"]
    player["max_hp"] = 80 + stats["vitality"] * 4
    player["crit_chance"] = min(0.3, stats["strength"] * 0.01 + stats["luck"] * 0.005)
    player["dodge_chance"] = min(0.4, stats["agility"] * 0.015)
    player["armor"] = stats["defense"] * 2
    
