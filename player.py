############################
### player.py - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–º ###
############################
"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–º:
- –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
- –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏ –ø—Ä–µ–¥–º–µ—Ç—ã
- –°–º–µ—Ä—Ç—å –∏ –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ
- –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –≥–∏–ª—å–¥–∏—è–º–∏
"""
import random
import database as db
import world
from telebot import types

def handle_start(bot, message):
    player_id = message.from_user.id
    player = db.load_player(player_id)

    if not player:
        # –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫
        bot.send_message(message.chat.id, world.world_lore, parse_mode="Markdown")
        bot.send_message(message.chat.id,
                        "üå† *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–∞—à–Ω—é –¢—ã—Å—è—á–∏ –ì—Ä–µ–∑!*\n"
                        "–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, —Å–∫–∞–∂–∏ –º–Ω–µ, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç, –∏—Å–∫–∞—Ç–µ–ª—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π?",
                        parse_mode="Markdown")
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ø–µ—Ä–µ–¥–∞–µ–º bot –≤ —Å–ª–µ–¥—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
        bot.register_next_step_handler(message, lambda m: set_nickname(bot, m))
    else:
        # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
        show_main_menu(bot, message)

def set_nickname(bot, message):  # –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä bot
    player_id = message.from_user.id
    player = world.player_template.copy()
    player["nickname"] = message.text

    db.save_player(player_id, player)

    bot.send_message(message.chat.id,
                    "üé≤ *–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏ 25 –æ—á–∫–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:* (—Ñ–æ—Ä–º–∞—Ç: 5 5 5 5 5 5)\n"
                    "üí™ –°–∏–ª–∞ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —É—Ä–æ–Ω –∏ —à–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞\n"
                    "üèÉ –õ–æ–≤–∫–æ—Å—Ç—å - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –∞—Ç–∞–∫–∏\n"
                    "‚ù§Ô∏è –ñ–∏–≤—É—á–µ—Å—Ç—å - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ\n"
                    "üçÄ –£–¥–∞—á–∞ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å –Ω–∞–π—Ç–∏ —Ä–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã\n"
                    "üéØ –¢–æ—á–Ω–æ—Å—Ç—å - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å –ø–æ–ø–∞–¥–∞–Ω–∏—è\n"
                    "üõ°Ô∏è –ó–∞—â–∏—Ç–∞ - —É–º–µ–Ω—å—à–∞–µ—Ç –ø–æ–ª—É—á–∞–µ–º—ã–π —É—Ä–æ–Ω",
                    parse_mode="Markdown")
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ø–µ—Ä–µ–¥–∞–µ–º bot –≤ —Å–ª–µ–¥—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
    bot.register_next_step_handler(message, lambda m: set_stats(bot, m))

def set_stats(bot, message):  # –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä bot
    player_id = message.from_user.id
    player = db.load_player(player_id)

    try:
        stats = list(map(int, message.text.split()))
        if sum(stats) == 25 and len(stats) == 6:
            player["stats"] = {
                "strength": stats[0],
                "agility": stats[1],
                "vitality": stats[2],
                "luck": stats[3],
                "accuracy": stats[4],
                "defense": stats[5]
            }
            player["max_hp"] = 80 + stats[2] * 4
            player["hp"] = player["max_hp"]

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            weapons = ["üó°Ô∏è –ú–µ—á", "üî™ –ö–∏–Ω–∂–∞–ª", "üèè –ë—É–ª–∞–≤–∞", "üèπ –õ—É–∫", "ü™ì –¢–æ–ø–æ—Ä", "üî± –ö–æ–ø—å–µ", "üî® –ú–æ–ª–æ—Ç", "üèπ –ê—Ä–±–∞–ª–µ—Ç"]
            markup.add(*weapons[:4])
            markup.add(*weapons[4:])

            bot.send_message(message.chat.id,
                           "‚öîÔ∏è *–í—ã–±–µ—Ä–∏ —Å–≤–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –æ—Ä—É–∂–∏–µ:*\n"
                           "üó°Ô∏è –ú–µ—á - —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ\n"
                           "üî™ –ö–∏–Ω–∂–∞–ª - –±—ã—Å—Ç—Ä—ã–µ –∞—Ç–∞–∫–∏\n"
                           "üèè –ë—É–ª–∞–≤–∞ - –º–æ—â–Ω—ã–µ —É–¥–∞—Ä—ã\n"
                           "üèπ –õ—É–∫ - –¥–∞–ª—å–Ω–∏–π –±–æ–π\n"
                           "ü™ì –¢–æ–ø–æ—Ä - –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–Ω\n"
                           "üî± –ö–æ–ø—å–µ - –¥–∞–ª—å–Ω–∏–µ –∞—Ç–∞–∫–∏\n"
                           "üî® –ú–æ–ª–æ—Ç - —Å–æ–∫—Ä—É—à–∏—Ç–µ–ª—å–Ω—ã–µ —É–¥–∞—Ä—ã\n"
                           "üèπ –ê—Ä–±–∞–ª–µ—Ç - –º–æ—â–Ω—ã–µ –≤—ã—Å—Ç—Ä–µ–ª—ã",
                           reply_markup=markup, parse_mode="Markdown")
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ø–µ—Ä–µ–¥–∞–µ–º bot –≤ —Å–ª–µ–¥—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
            bot.register_next_step_handler(message, lambda m: set_weapon(bot, m))

            db.save_player(player_id, player)
        else:
            raise ValueError
    except:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏ 6 —á–∏—Å–µ–ª (—Å—É–º–º–∞=25).")
        bot.register_next_step_handler(message, lambda m: set_stats(bot, m))

def set_weapon(bot, message):  # –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä bot
    player_id = message.from_user.id
    player = db.load_player(player_id)

    if player is None:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return

    weapon_choice = {
        "üó°Ô∏è –ú–µ—á": "sword",
        "üî™ –ö–∏–Ω–∂–∞–ª": "dagger",
        "üèè –ë—É–ª–∞–≤–∞": "mace",
        "üèπ –õ—É–∫": "bow",
        "ü™ì –¢–æ–ø–æ—Ä": "axe",
        "üî± –ö–æ–ø—å–µ": "spear",
        "üî® –ú–æ–ª–æ—Ç": "hammer",
        "üèπ –ê—Ä–±–∞–ª–µ—Ç": "crossbow"
    }

    if message.text in weapon_choice:
        weapon = weapon_choice[message.text]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ—Ä—É–∂–∏—è –≤ —Å–ª–æ–≤–∞—Ä–µ
        if weapon not in world.weapons_data:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –æ—Ä—É–∂–∏–µ {weapon} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return

        player["current_weapon"] = weapon
        player["weapons"][weapon]["level"] = 1
        player["weapons"][weapon]["skills"].append(world.weapons_data[weapon]["base_skill"])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏
        check_new_skills(bot, player_id, weapon)

        db.save_player(player_id, player)

        bot.send_message(message.chat.id,
                        f"‚úÖ –¢—ã –≤—ã–±—Ä–∞–ª {world.weapons_data[weapon]['name']}!\n"
                        f"–¢–≤–æ–π –ø–µ—Ä–≤—ã–π –Ω–∞–≤—ã–∫: *{world.weapons_data[weapon]['base_skill']}*",
                        parse_mode="Markdown")
        show_main_menu(bot, message)
    else:
        bot.send_message(message.chat.id, "‚ùå –í—ã–±–µ—Ä–∏ –æ—Ä—É–∂–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞!")
        bot.register_next_step_handler(message, lambda m: set_weapon(bot, m))

def check_new_skills(bot, player_id, weapon_type):
    player = db.load_player(player_id)
    if player is None:
        return

    weapon_data = world.weapons_data[weapon_type]
    stats = player["stats"]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
    dominant_stat = max(stats, key=stats.get)
    stat_value = stats[dominant_stat]

    # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –Ω–∞–≤—ã–∫–∏
    available_skills = []
    for skill_name, skill_data in weapon_data["skills"].items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –Ω–∞–≤—ã–∫–∞
        req_met = True
        for stat, value in skill_data.items():
            if stat.startswith("min_"):
                stat_name = stat[4:]
                if stats.get(stat_name, 0) < value:
                    req_met = False
                    break

        # –ï—Å–ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏ –Ω–∞–≤—ã–∫ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω
        if req_met and skill_name not in player["weapons"][weapon_type]["skills"]:
            # –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–µ
            if weapon_data["stat"] == dominant_stat:
                available_skills.insert(0, skill_name)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
            else:
                available_skills.append(skill_name)

    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π
    if available_skills:
        new_skill = random.choice(available_skills)
        player["weapons"][weapon_type]["skills"].append(new_skill)
        bot.send_message(player_id,
                       f"‚ú® –¢—ã –æ—Å–≤–æ–∏–ª –Ω–æ–≤—ã–π –Ω–∞–≤—ã–∫: *{new_skill}*!\n"
                       f"–ò—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –≤ –±–æ—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤—ã–∫–æ–≤.",
                       parse_mode="Markdown")
        db.save_player(player_id, player)

def show_main_menu(bot, message):
    player_id = message.from_user.id
    player = db.load_player(player_id)
    if player is None:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö! –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    server_progress = db.get_server_progress()
    floor_desc = world.FLOOR_DESCRIPTIONS.get(player["floor"], f"–≠—Ç–∞–∂ {player['floor']}")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        "‚öîÔ∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å –º–æ–±–∞",
        "üèÉ‚Äç‚ôÇÔ∏è –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å",
        "üëë –ê—Ç–∞–∫–æ–≤–∞—Ç—å –±–æ—Å—Å–∞",
        "üë• –†–µ–π–¥—ã",
        "‚öîÔ∏è PvP",
        "üõí –ú–∞–≥–∞–∑–∏–Ω",
        "üìä –ü–µ—Ä—Å–æ–Ω–∞–∂",
        "üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å",
        "üîß –¢–∞–ª–∞–Ω—Ç—ã",
        "üè¶ –≠–∫–æ–Ω–æ–º–∏–∫–∞",
        "üè∞ –ì–∏–ª—å–¥–∏—è"
    ]
    markup.add(*buttons[:3])
    markup.add(*buttons[3:6])
    markup.add(*buttons[6:9])
    markup.add(*buttons[9:])

    # –û–ø—ã—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    required_exp = player['level'] * 100

    # –û—Ä—É–∂–∏–µ
    weapon = player['current_weapon']
    if weapon:
        weapon_name = world.weapons_data[weapon]['name']
        weapon_level = player['weapons'][weapon]['level']
        weapon_text = f"üó°Ô∏è –û—Ä—É–∂–∏–µ: {weapon_name} (–£—Ä. {weapon_level})"
    else:
        weapon_text = "üó°Ô∏è –û—Ä—É–∂–∏–µ: –ù–µ –≤—ã–±—Ä–∞–Ω–æ"

    status = (
        f"üë§ *{player['nickname']}* | –£—Ä. {player['level']} ({player['exp']}/{required_exp})\n"
        f"üèÜ –≠—Ç–∞–∂ {player['floor']}: {floor_desc}\n"
        f"‚ù§Ô∏è HP: {player['hp']}/{player['max_hp']}\n"
        f"ü™ô –ó–æ–ª–æ—Ç–æ: {player['gold']}\n"
        f"{weapon_text}"
    )

    bot.send_message(message.chat.id, status, reply_markup=markup, parse_mode="Markdown")

def show_character(bot, message):
    player_id = message.from_user.id
    player = db.load_player(player_id)
    if player is None:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö! –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    weapon = player["current_weapon"]
    weapon_level = player["weapons"][weapon]["level"] if weapon else 0
    weapon_skills = ", ".join(player["weapons"][weapon]["skills"]) if weapon else "–ù–µ—Ç –Ω–∞–≤—ã–∫–æ–≤"

    stats = player["stats"]
    stat_info = (
        f"üí™ –°–∏–ª–∞: {stats['strength']}\n"
        f"üèÉ –õ–æ–≤–∫–æ—Å—Ç—å: {stats['agility']}\n"
        f"‚ù§Ô∏è –ñ–∏–≤—É—á–µ—Å—Ç—å: {stats['vitality']}\n"
        f"üçÄ –£–¥–∞—á–∞: {stats['luck']}\n"
        f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {stats['accuracy']}\n"
        f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞: {stats['defense']}"
    )

    # –û–ø—ã—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    required_exp = player['level'] * 100

    character_info = (
        f"üë§ *{player['nickname']}*\n"
        f"üèÜ –£—Ä–æ–≤–µ–Ω—å: {player['level']} ({player['exp']}/{required_exp} –æ–ø—ã—Ç–∞)\n"
        f"üè† –≠—Ç–∞–∂: {player['floor']}\n"
        f"üíÄ –°–º–µ—Ä—Ç–µ–π: {player['deaths']}\n\n"
        f"‚öîÔ∏è *–û—Ä—É–∂–∏–µ:* {world.weapons_data[weapon]['name'] if weapon else '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'} (–£—Ä. {weapon_level})\n"
        f"üîÆ –ù–∞–≤—ã–∫–∏: {weapon_skills}\n\n"
        f"üìä *–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:*\n{stat_info}"
    )

    markup = types.InlineKeyboardMarkup()
    if player["exp"] >= required_exp:
        markup.add(types.InlineKeyboardButton("‚¨ÜÔ∏è –ü–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="level_up"))

    bot.send_message(message.chat.id, character_info, reply_markup=markup, parse_mode="Markdown")

def increase_stat(bot, call):
    player_id = call.from_user.id
    player = db.load_player(player_id)
    if player is None:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö!")
        return

    stat_map = {
        "stat_str": "strength",
        "stat_agi": "agility",
        "stat_acc": "accuracy",
        "stat_luck": "luck",
        "stat_def": "defense",
        "stat_vit": "vitality"
    }

    stat = stat_map[call.data]
    player["stats"][stat] += 1

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    if stat == "vitality":
        player["max_hp"] = 80 + player["stats"]["vitality"] * 4
        player["hp"] = min(player["hp"], player["max_hp"])

    db.save_player(player_id, player)

    bot.answer_callback_query(call.id, f"{stat} —É–≤–µ–ª–∏—á–µ–Ω!")
    show_character(bot, call.message)

def show_inventory(bot, message):
    player_id = message.from_user.id
    player = db.load_player(player_id)
    if player is None:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö! –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    if not player["inventory"]:
        bot.send_message(message.chat.id, "–¢–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç!")
        return

    inventory_text = "üéí *–¢–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:*\n"
    for item in player["inventory"]:
        inventory_text += f"- {item}\n"

    markup = types.InlineKeyboardMarkup()
    if "health_potion" in player["inventory"]:
        markup.add(types.InlineKeyboardButton("üíâ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è", callback_data="use_health_potion"))
    if "elixir_strength" in player["inventory"]:
        markup.add(types.InlineKeyboardButton("üí™ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–ª–∏–∫—Å–∏—Ä —Å–∏–ª—ã", callback_data="use_elixir_str"))
    if "elixir_agility" in player["inventory"]:
        markup.add(types.InlineKeyboardButton("üèÉ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–ª–∏–∫—Å–∏—Ä –ª–æ–≤–∫–æ—Å—Ç–∏", callback_data="use_elixir_agi"))

    bot.send_message(message.chat.id, inventory_text, reply_markup=markup, parse_mode="Markdown")

def use_item(bot, call):
    player_id = call.from_user.id
    player = db.load_player(player_id)
    if player is None:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö!")
        return

    item_type = call.data.split("_")[1]

    if item_type == "health_potion":
        if "health_potion" in player["inventory"]:
            player["hp"] = min(player["max_hp"], player["hp"] + 50)
            player["inventory"].remove("health_potion")
            db.save_player(player_id, player)
            bot.answer_callback_query(call.id, "üíâ +50 HP!")
            show_inventory(bot, call.message)
        else:
            bot.answer_callback_query(call.id, "–£ —Ç–µ–±—è –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ...

def handle_death(bot, player_id):
    player = db.load_player(player_id)
    if player is None:
        return

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–º–µ—Ä—Ç–µ–π
    deaths = player.get("deaths", 0) + 1
    nickname = player["nickname"]

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å —Ç–µ–º –∂–µ –∏–º–µ–Ω–µ–º
    new_player = world.player_template.copy()
    new_player["nickname"] = nickname
    new_player["deaths"] = deaths

    db.save_player(player_id, new_player)

    bot.send_message(
        player_id,
        f"üíÄ *–¢—ã –ø–æ–≥–∏–±...*\n\n"
        f"–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤–æ–∑—Ä–æ–∂–¥–∞–µ—Ç—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–º —ç—Ç–∞–∂–µ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏.\n"
        f"–í—Å–µ —Ç–≤–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Ç–µ—Ä—è–Ω—ã, –Ω–æ –∏–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n\n"
        f"–¢–µ–ø–µ—Ä—å —Ç—ã —Å–Ω–æ–≤–∞ *{nickname}*, –Ω–æ —É–∂–µ —Å –æ–ø—ã—Ç–æ–º {deaths} —Å–º–µ—Ä—Ç–µ–π.",
        parse_mode="Markdown"
    )

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤–æ–µ –æ—Ä—É–∂–∏–µ
    choose_weapon_after_death(bot, player_id)

def choose_weapon_after_death(bot, player_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    weapons = ["üó°Ô∏è –ú–µ—á", "üî™ –ö–∏–Ω–∂–∞–ª", "üèè –ë—É–ª–∞–≤–∞", "üèπ –õ—É–∫",
               "ü™ì –¢–æ–ø–æ—Ä", "üî± –ö–æ–ø—å–µ", "üî® –ú–æ–ª–æ—Ç", "üèπ –ê—Ä–±–∞–ª–µ—Ç"]
    markup.add(*weapons[:4])
    markup.add(*weapons[4:])

    bot.send_message(player_id,
                   "‚öîÔ∏è *–í—ã–±–µ—Ä–∏ –Ω–æ–≤–æ–µ –æ—Ä—É–∂–∏–µ –¥–ª—è –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è:*\n"
                   "üó°Ô∏è –ú–µ—á - —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ\n"
                   "üî™ –ö–∏–Ω–∂–∞–ª - –±—ã—Å—Ç—Ä—ã–µ –∞—Ç–∞–∫–∏\n"
                   "üèè –ë—É–ª–∞–≤–∞ - –º–æ—â–Ω—ã–µ —É–¥–∞—Ä—ã\n"
                   "üèπ –õ—É–∫ - –¥–∞–ª—å–Ω–∏–π –±–æ–π\n"
                   "ü™ì –¢–æ–ø–æ—Ä - –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–Ω\n"
                   "üî± –ö–æ–ø—å–µ - –¥–∞–ª—å–Ω–∏–µ –∞—Ç–∞–∫–∏\n"
                   "üî® –ú–æ–ª–æ—Ç - —Å–æ–∫—Ä—É—à–∏—Ç–µ–ª—å–Ω—ã–µ —É–¥–∞—Ä—ã\n"
                   "üèπ –ê—Ä–±–∞–ª–µ—Ç - –º–æ—â–Ω—ã–µ –≤—ã—Å—Ç—Ä–µ–ª—ã",
                   reply_markup=markup, parse_mode="Markdown")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    class FakeMessage:
        def __init__(self, chat_id):
            self.chat = types.Chat(id=chat_id, type='private')
            self.from_user = types.User(id=player_id, is_bot=False, first_name='')
            self.text = ''

    bot.register_next_step_handler_by_chat_id(player_id, lambda m: set_weapon_after_death(bot, m))

def set_weapon_after_death(bot, message):
    player_id = message.from_user.id
    player = db.load_player(player_id)

    if player is None:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return

    weapon_choice = {
        "üó°Ô∏è –ú–µ—á": "sword",
        "üî™ –ö–∏–Ω–∂–∞–ª": "dagger",
        "üèè –ë—É–ª–∞–≤–∞": "mace",
        "üèπ –õ—É–∫": "bow",
        "ü™ì –¢–æ–ø–æ—Ä": "axe",
        "üî± –ö–æ–ø—å–µ": "spear",
        "üî® –ú–æ–ª–æ—Ç": "hammer",
        "üèπ –ê—Ä–±–∞–ª–µ—Ç": "crossbow"
    }

    if message.text in weapon_choice:
        weapon = weapon_choice[message.text]
        player["current_weapon"] = weapon
        player["weapons"][weapon]["level"] = 1
        player["weapons"][weapon]["skills"].append(world.weapons_data[weapon]["base_skill"])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏
        check_new_skills(bot, player_id, weapon)

        db.save_player(player_id, player)

        bot.send_message(message.chat.id,
                        f"‚úÖ –¢—ã –≤—ã–±—Ä–∞–ª {world.weapons_data[weapon]['name']}!\n"
                        f"–¢–≤–æ–π –ø–µ—Ä–≤—ã–π –Ω–∞–≤—ã–∫: *{world.weapons_data[weapon]['base_skill']}*",
                        parse_mode="Markdown")
        show_main_menu(bot, message)
    else:
        bot.send_message(message.chat.id, "‚ùå –í—ã–±–µ—Ä–∏ –æ—Ä—É–∂–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞!")
        bot.register_next_step_handler(message, lambda m: set_weapon_after_death(bot, m))