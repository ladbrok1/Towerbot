############################
### combat.py - –ë–æ–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ ###
############################
"""
–ú–æ–¥—É–ª—å –±–æ–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã:
- –ë–æ–π —Å –º–æ–±–∞–º–∏
- –†–∞—Å—á–µ—Ç —É—Ä–æ–Ω–∞
- –ë–æ–µ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
- –°–∏—Å—Ç–µ–º–∞ –ª—É—Ç–∞
"""
import random
import math
import time
import logging
from typing import Dict, Tuple, Optional
from database import db
from player import get_player_data, save_player_data

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class CombatSystem:
    def __init__(self):
        self.mob_templates = self._load_mob_templates()
        self.boss_templates = self._load_boss_templates()
        self.combat_effects = self._load_combat_effects()

    def _load_mob_templates(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –º–æ–±–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open('data/mobs.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤ –º–æ–±–æ–≤: {e}")
            return {
                "forest_wolf": {
                    "name": "–õ–µ—Å–Ω–æ–π –≤–æ–ª–∫",
                    "hp": 50,
                    "attack": 10,
                    "defense": 5,
                    "xp": 20,
                    "gold": (5, 15),
                    "loot": ["wolf_fang", "leather"],
                    "loot_chance": 0.3
                }
            }

    def _load_boss_templates(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –±–æ—Å—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open('data/bosses.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤ –±–æ—Å—Å–æ–≤: {e}")
            return {
                "ancient_dragon": {
                    "name": "–î—Ä–µ–≤–Ω–∏–π –¥—Ä–∞–∫–æ–Ω",
                    "hp": 1000,
                    "attack": 50,
                    "defense": 30,
                    "xp": 500,
                    "gold": (200, 500),
                    "loot": ["dragon_scale", "epic_artifact"],
                    "loot_chance": 0.8
                }
            }

    def _load_combat_effects(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±–æ–µ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        try:
            with open('data/combat_effects.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–µ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤: {e}")
            return {
                "poison": {
                    "name": "–Ø–¥",
                    "duration": 3,
                    "damage_per_turn": 5,
                    "chance": 0.1
                },
                "stun": {
                    "name": "–û–≥–ª—É—à–µ–Ω–∏–µ",
                    "duration": 1,
                    "miss_turn": True,
                    "chance": 0.05
                }
            }

    def initiate_combat(self, bot, message, is_boss: bool = False) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—è"""
        try:
            player_id = message.from_user.id
            player_data = get_player_data(player_id)
            
            if not player_data:
                bot.reply_to(message, "‚ùå –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            
            if player_data.get("in_combat", False):
                bot.reply_to(message, "‚ùå –í—ã —É–∂–µ –≤ –±–æ—é!")
                return
            
            # –í—ã–±–æ—Ä –º–æ–±–∞ –∏–ª–∏ –±–æ—Å—Å–∞
            if is_boss:
                mob = self._select_boss(player_data.get("floor", 1))
                if not mob:
                    bot.reply_to(message, "‚ùå –ë–æ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                    return
            else:
                mob = self._select_mob(player_data.get("floor", 1))
            
            # –ù–∞—á–∞–ª–æ –±–æ—è
            player_data["in_combat"] = True
            player_data["combat_data"] = {
                "mob": mob,
                "mob_hp": mob["hp"],
                "player_hp": player_data["stats"]["hp"],
                "effects": [],
                "turn": 0
            }
            save_player_data(player_id, player_data)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –±–æ—è
            self._send_combat_message(bot, message, player_data, mob, is_boss)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—è: {e}")
            bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –±–æ—è!")

    def _select_mob(self, floor: int) -> Dict:
        """–í—ã–±–æ—Ä –º–æ–±–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–∞–∂–∞"""
        mob_pool = []
        for mob_id, mob_data in self.mob_templates.items():
            # –£—Å–∏–ª–∏–≤–∞–µ–º –º–æ–±–æ–≤ –Ω–∞ –≤—ã—Å–æ–∫–∏—Ö —ç—Ç–∞–∂–∞—Ö
            scaled_mob = mob_data.copy()
            scale_factor = 1 + (floor - 1) * 0.2
            scaled_mob["hp"] = math.ceil(scaled_mob["hp"] * scale_factor)
            scaled_mob["attack"] = math.ceil(scaled_mob["attack"] * scale_factor)
            scaled_mob["defense"] = math.ceil(scaled_mob["defense"] * scale_factor)
            scaled_mob["xp"] = math.ceil(scaled_mob["xp"] * scale_factor)
            mob_pool.append(scaled_mob)
        
        return random.choice(mob_pool)

    def _select_boss(self, floor: int) -> Optional[Dict]:
        """–í—ã–±–æ—Ä –±–æ—Å—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–∞–∂–∞"""
        if not self.boss_templates:
            return None
        
        boss_id = random.choice(list(self.boss_templates.keys()))
        boss_data = self.boss_templates[boss_id].copy()
        
        # –£—Å–∏–ª–∏–≤–∞–µ–º –±–æ—Å—Å–∞ –Ω–∞ –≤—ã—Å–æ–∫–∏—Ö —ç—Ç–∞–∂–∞—Ö
        scale_factor = 1 + (floor - 1) * 0.5
        boss_data["hp"] = math.ceil(boss_data["hp"] * scale_factor)
        boss_data["attack"] = math.ceil(boss_data["attack"] * scale_factor)
        boss_data["defense"] = math.ceil(boss_data["defense"] * scale_factor)
        boss_data["xp"] = math.ceil(boss_data["xp"] * scale_factor)
        
        return boss_data

    def _send_combat_message(self, bot, message, player_data: Dict, mob: Dict, is_boss: bool) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–æ–µ"""
        try:
            combat_text = (
                f"‚öîÔ∏è {'–ë–û–°–° –ë–ò–¢–í–ê! ' if is_boss else ''}–ë–æ–π –Ω–∞—á–∞–ª—Å—è!\n\n"
                f"–í—ã —Å—Ä–∞–∂–∞–µ—Ç–µ—Å—å —Å: {mob['name']}\n"
                f"‚ù§Ô∏è HP: {mob['hp']}\n"
                f"üó°Ô∏è –ê—Ç–∞–∫–∞: {mob['attack']}\n"
                f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞: {mob['defense']}\n\n"
                f"–í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ: {player_data['stats']['hp']}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            
            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton("üó° –ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data="combat_attack"),
                types.InlineKeyboardButton("üõ° –ó–∞—â–∏—â–∞—Ç—å—Å—è", callback_data="combat_defend")
            )
            markup.row(
                types.InlineKeyboardButton("üß™ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–µ–ª—å–µ", callback_data="combat_potion"),
                types.InlineKeyboardButton("üèÉ –ë–µ–∂–∞—Ç—å", callback_data="combat_flee")
            )
            
            bot.send_message(message.chat.id, combat_text, reply_markup=markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–æ–µ: {e}")
            raise

    def process_combat_action(self, bot, call, action: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–µ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        try:
            player_id = call.from_user.id
            player_data = get_player_data(player_id)
            
            if not player_data or not player_data.get("in_combat", False):
                bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –≤ –±–æ—é!")
                return
            
            combat_data = player_data["combat_data"]
            mob = combat_data["mob"]
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞
            player_damage = 0
            mob_damage = 0
            message = ""
            
            if action == "attack":
                player_damage = self._calculate_damage(
                    player_data["stats"]["attack"],
                    mob["defense"],
                    critical_chance=player_data["stats"].get("crit_chance", 0.1)
                )
                combat_data["mob_hp"] -= player_damage
                message = f"üó° –í—ã –∞—Ç–∞–∫–æ–≤–∞–ª–∏ –∏ –Ω–∞–Ω–µ—Å–ª–∏ {player_damage} —É—Ä–æ–Ω–∞!"
            
            elif action == "defend":
                # –£–º–µ–Ω—å—à–µ–Ω–∏–µ –ø–æ–ª—É—á–∞–µ–º–æ–≥–æ —É—Ä–æ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ö–æ–¥—É
                combat_data["defending"] = True
                message = "üõ° –í—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏—Å—å –∫ –∑–∞—â–∏—Ç–µ!"
            
            elif action == "potion":
                # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–µ–ª—å—è (—Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ player.py)
                message = "üß™ –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è!"
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–µ–ª—å—è
            
            elif action == "flee":
                flee_chance = 0.5 + player_data["stats"].get("agility", 0) * 0.02
                if random.random() < flee_chance:
                    message = "üèÉ‚Äç‚ôÇÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ —Å–±–µ–∂–∞–ª–∏!"
                    self._end_combat(bot, call, player_id, player_data, False)
                    return
                else:
                    message = "‚ùå –í–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–±–µ–∂–∞—Ç—å!"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
            if combat_data["mob_hp"] <= 0:
                self._end_combat(bot, call, player_id, player_data, True)
                return
            
            # –•–æ–¥ –º–æ–±–∞ (–µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –∑–∞—â–∏—â–∞–µ—Ç—Å—è)
            if action != "defend":
                mob_damage = self._calculate_damage(
                    mob["attack"],
                    player_data["stats"]["defense"] * (0.5 if combat_data.get("defending", False) else 1)
                )
                combat_data["player_hp"] -= mob_damage
                message += f"\n\n{mob['name']} –∞—Ç–∞–∫–æ–≤–∞–ª –∏ –Ω–∞–Ω–µ—Å –≤–∞–º {mob_damage} —É—Ä–æ–Ω–∞!"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏—è
            if combat_data["player_hp"] <= 0:
                self._end_combat(bot, call, player_id, player_data, False)
                return
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—è
            combat_data["turn"] += 1
            combat_data.pop("defending", None)
            save_player_data(player_id, player_data)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—è
            self._update_combat_message(bot, call, player_data, mob, message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–µ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è: {e}")
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—é!")

    def _calculate_damage(self, attack: int, defense: int, critical_chance: float = 0.0) -> int:
        """–†–∞—Å—á–µ—Ç —É—Ä–æ–Ω–∞ —Å —É—á–µ—Ç–æ–º –∑–∞—â–∏—Ç—ã –∏ —à–∞–Ω—Å–∞ –∫—Ä–∏—Ç–∞"""
        base_damage = max(1, attack - defense // 2)
        if random.random() < critical_chance:
            return base_damage * 2
        return base_damage

    def _end_combat(self, bot, call, player_id: int, player_data: Dict, victory: bool) -> None:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–æ—è"""
        try:
            combat_data = player_data["combat_data"]
            mob = combat_data["mob"]
            
            if victory:
                # –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–æ–±–µ–¥—É
                xp_gain = mob["xp"]
                gold_gain = random.randint(*mob["gold"])
                
                player_data["stats"]["xp"] += xp_gain
                player_data["stats"]["gold"] += gold_gain
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª—É—Ç–∞
                loot = []
                if random.random() < mob.get("loot_chance", 0):
                    loot_item = random.choice(mob["loot"])
                    loot.append(loot_item)
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (—Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ player.py)
                
                message = (
                    f"üéâ –ü–æ–±–µ–¥–∞! –í—ã –ø–æ–±–µ–¥–∏–ª–∏ {mob['name']}!\n\n"
                    f"–ü–æ–ª—É—á–µ–Ω–æ: {xp_gain} –æ–ø—ã—Ç–∞ –∏ {gold_gain} –∑–æ–ª–æ—Ç–∞\n"
                    f"–î–æ–±—ã—á–∞: {', '.join(loot) if loot else '–Ω–µ—Ç'}"
                )
            else:
                # –ü–æ—Ä–∞–∂–µ–Ω–∏–µ - —à—Ç—Ä–∞—Ñ—ã
                gold_loss = min(player_data["stats"]["gold"], random.randint(10, 50))
                player_data["stats"]["gold"] -= gold_loss
                player_data["stats"]["hp"] = max(1, player_data["stats"]["max_hp"] // 2)
                
                message = (
                    f"‚ò†Ô∏è –ü–æ—Ä–∞–∂–µ–Ω–∏–µ! {mob['name']} –ø–æ–±–µ–¥–∏–ª –≤–∞—Å.\n\n"
                    f"–í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ {gold_loss} –∑–æ–ª–æ—Ç–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø–æ–ª–æ–≤–∏–Ω—É –∑–¥–æ—Ä–æ–≤—å—è."
                )
            
            # –í—ã—Ö–æ–¥ –∏–∑ –±–æ—è
            player_data["in_combat"] = False
            player_data.pop("combat_data", None)
            save_player_data(player_id, player_data)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –±–æ—è
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=message
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–æ—è: {e}")
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –±–æ—è!")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
combat_system = CombatSystem()

def initiate_combat(bot, message, is_boss: bool = False):
    combat_system.initiate_combat(bot, message, is_boss)

def handle_combat_action(bot, call):
    action = call.data.replace("combat_", "")
    combat_system.process_combat_action(bot, call, action)
